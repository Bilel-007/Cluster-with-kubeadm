#Install Docker and its dependent components:
---
- hosts: all
  become: true
  tasks:
    - name: Install packages that allow apt to be used over HTTPS
      apt:
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg-agent
          - software-properties-common

    - name: Add an apt signing key for Docker
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add apt repository for stable version
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu xenial stable
        state: present

    - name: Install docker and its dependecies
      apt:
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
          - docker-ce
          - docker-ce-cli
          - containerd.io
      notify:
        - docker status

    - name: Add vagrant user to docker group
      user:
        name: vagrant
        group: docker

    #Kubelet will not start if the system has swap enabled, so we are disabling swap:

    - name: Remove swapfile from /etc/fstab
      mount:
        name: "{{ item }}"
        fstype: swap
        state: absent
      with_items:
        - swap
        - none

    - name: Disable swap
      command: swapoff -a
      when: ansible_swaptotal_mb > 0

    #Installing kubelet, kubeadm and kubectl:

    - name: Add an apt signing key for Kubernetes
      apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        state: present

    - name: Adding apt repository for Kubernetes
      apt_repository:
        repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
        state: present
        filename: kubernetes.list

    - name: Install Kubernetes binaries
      apt:
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
          - kubelet
          - kubeadm
          - kubectl

    - name: Configure node ip
      lineinfile:
        path: /usr/bin/kubelet
        line: KUBELET_EXTRA_ARGS=--node-ip={{ node_ip }}

    - name: Restart kubelet
      service:
        name: kubelet
        daemon_reload: yes
        state: restarted

    #Initialize the Kubernetes cluster with kubeadm:
    - name: Remove containerd configuration
      command: rm /etc/containerd/config.toml
    - name: REstart containerd
      command: systemctl restart containerd
    - name: Initialize the Kubernetes cluster using kubeadm
      command: kubeadm init --apiserver-advertise-address="192.168.50.10" --apiserver-cert-extra-sans="192.168.50.10"  --node-name k8s-master --pod-network-cidr=192.168.0.0/16

    #Setup the kube config file for the vagrant user to access the Kubernetes cluster:

    - name: Setup kubeconfig for vagrant user
      command: "{{ item }}"
      with_items:
        - mkdir -p /home/vagrant/.kube
        - cp -i /etc/kubernetes/admin.conf /home/vagrant/.kube/config
        - chown vagrant:vagrant /home/vagrant/.kube/config

    #Setup the container networking provider and the network policy engine:

    - name: Install calico pod network
      become: false
      command: kubectl create -f https://docs.projectcalico.org/manifests/calico.yaml

    #Generate kube join command for joining the node to the Kubernetes cluster and store the command in the file named join-command:

    - name: Generate join command
      command: kubeadm token create --print-join-command
      register: join_command

    - name: Copy join command to local file
      copy:
        content: "{{ join_command.stdout_lines[0] }}"
        dest: "./join-command"

    - name: fetch the file to the local machine
      fetch: 
        src: "./join-command"
        dest: "./join-command"

  #Setup a handler for checking Docker daemon:

  handlers:
    - name: docker status
      service: name=docker state=started
